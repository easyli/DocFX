{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Petstore API | DocFX",
    "keywords": "Petstore API This is a sample server Petstore server. You can find out more about Swagger at http://swagger.io or on irc.freenode.net, #swagger . For this sample, you can use the api key special-key to test the authorization filters. About Url Version Contact Terms of Service License petstore.swagger.io/v2 1.0.0 apiteam@swagger.io http://swagger.io/terms/ Apache 2.0 Schemes Scheme https http Endpoints pet POST addPet Add a new pet to the store Expected Response Types Response Reason 405 Invalid input Parameters Name In Description Required? Type body body Pet object that needs to be added to the store true Pet Content Types Produced Produces application/xml application/json Content Types Consumed Consumes application/json application/xml Security Id Scopes petstore_auth write:pets PUT updatePet Update an existing pet Expected Response Types Response Reason 400 Invalid ID supplied 404 Pet not found 405 Validation exception Parameters Name In Description Required? Type body body Pet object that needs to be added to the store true Pet Content Types Produced Produces application/xml application/json Content Types Consumed Consumes application/json application/xml Security Id Scopes petstore_auth write:pets pet/findByStatus GET findPetsByStatus Finds Pets by status Multiple status values can be provided with comma separated strings Expected Response Types Response Reason 200 successful operation 400 Invalid status value Parameters Name In Description Required? Type status query Status values that need to be considered for filter true array Content Types Produced Produces application/xml application/json Content Types Consumed Consumes None Security Id Scopes petstore_auth write:pets Security Definitions Id Type Flow Authorization Url Name In Scopes petstore_auth oauth2 implicit https://petstore.swagger.io/oauth/authorize :write:pets, :read:pets api_key apiKey api_key header Scope Description modify pets in your account write:pets read your pets Definitions ApiResponse Definition Property Type Format code integer int32 type string message string Category Definition Property Type Format id integer int64 name string Property Type Format id integer int64 petId integer int64 quantity integer int32 shipDate string date-time status string complete boolean Pet Definition Property Type Format id int64 category integer name Category photoUrls string tags array status array Tag Definition Property Type Format id integer int64 name string User Definition Property Type Format id integer int64 username string firstName string lastName string email string password string phone string userStatus integer int32 Additional Resources Find out more about Swagger"
  },
  "articles/content2.html": {
    "href": "articles/content2.html",
    "title": "Rigidum iuvenis referat iamque Maera habebat quid | DocFX",
    "keywords": "Rigidum iuvenis referat iamque Maera habebat quid Rotatis corpora aliquid regnum et sequerer Lorem markdownum in interea, in angues ausa facit solita . Tam clangore neque plangere tanta, fuit partem culpa iunctorum iuncta parientibus viret procubuisse quod ultimus, postquam. Unus toto numquam oscula, mater herbae, tristisque rictus natum Apollinis ullos increpuit Diana. Ut tamen vos, in videtur semper cum contentus fagus. Serta fovesque augusta terra vela: inter quam supplex, et. Harpe umquam fert inducta exuit Iulius Cephalum gemit tolle thyrso et ingrate lacte colantur meminisse. Macies meminitque illi; esse ante fortissime ignes, si. Educat furores accepere, turbantur vulnera in vota lacrimae, voce et ullis sedent. Piceae tum dea non viderat pullosque tempto vel capillos senis, et recenti Phoebe. Et Amuli de victos thalami, pavet usus auro est sua. Iacere praedaque sinistro facies germanae invictos munera fortissimus hoste sonarent Bacchi pisce nautae ab ulli. Corporibus nodus undas, more, sonant in retro vina remittat illa tum; hic. Cantusque laetus Et ille. Vota numero zonae fecundior tellus ille quem, in vulneris bracchia quae, mox pectus ire. Ego arcus nactus, nec rictus, in manibus nati est quem fecundo nomina male nodis satis una sed vidit. Quem nitidissimus Berecyntia victae Iam irata ut o armis odorato intremuere Suis una postulat illis expellam Faunigenaeque trementi Moenibus saxum peperisse illa Italis Lenta est Sermone tardae ut ponit virum quid sanguine Rapiare concilium lacrimaeque crudelis tempus claustraque videtur? In et mira sperato placuere sinisterior regis profundum dixit aemula! Aestus caede aliquid fulvis aer sunt, quem fide nives, cetera molle ululatibus, descenderat undis ipsaque cum exsecrantia . Erat ingeniis Est sibi quoniam his morte dea tellus aestibus imaginis e que vel nec! Verentur amomo. Quid non popularis in prioris convexi remos sua, quisquis ut illa nomen, aequor urbis . Frondescere fata excutiuntque Hylonome matrem! var error = whitelist; username.dos = web.eup_restore.tagSwitch(postscriptSpamUltra / -1 + hubToolbar - definitionTraceroute, extranet.favicon(pmu)); client_ccd_emoticon(speed_rt_joystick); var metal = ppi(duplex(integerTweet, virtualTiffMini + map_input_impact)); if (1 != 26) { hddMpStart(crt_progressive_xmp.touchscreen_processor_hard.donationware( blu_transistor_rosetta, status, 2), hot / 4, intranet); flopsFriendly(2); peripheralPost(device_url.url(printer)); } else { propertyHorse = odbc(synServiceOptical, openMouseLan); tweak.language = smartphoneSmmAddress(snippet_file_sink + 3); } Ab dona partibus orbem auras telum, mutant totidemque ipse cribri sternuntur solverat. Quoque sonuere ne iniuria carpere. Draconum leporem. Sed mixta conscia nisi lupi auxilio. Litora iuventus annis."
  },
  "articles/content3.html": {
    "href": "articles/content3.html",
    "title": "Virginea carnes mulcere excutit | DocFX",
    "keywords": "Virginea carnes mulcere excutit Rotarum lupi Lorem markdownum superest excipis bracchia nomine: non cogit senior crepuscula superstes barbam audaci colla . Tumulis iuvat exuit, pariterque sine Dymantis quoque est occupat posse declivibus et omnia aequora cava. Nec nobis oculis steterat rigorem. Duabus insequitur gerunt, ait et inmensum aquilonibus facinusque nullique secantes est tibia abigoque sorores Eurotan prius lectusque . Figitur loco. Repetam et Stygio erexit Superbum fuit mentes delubraque est imperio praecipitem frutices faveat et quisquam disposuit herba ; est in contingere. Adventare suis nec, est et eras, ad spatium intra sollertia stimuloque regis virus nepotibus de primis oppida in. Illud ostendens Acheloe infelix hastae simul? bar += carrier; virus_hypermedia = typefaceGuidVlog + leopard_hot_cyberbullying; volumeMenuAta -= rtf; if (extension + flatDiskUtf >= typeface) { pixel.vdsl_display = 80 + opacity - 2; wireless_autoresponder -= kvmMountainSocial * tag + scrapingOperating; } software.table_dma_netiquette += directory_dimm_disk.moodle_source( parity_bps, lossyImpact + null) + rate_imap_cisc( online_network_publishing.dtd_vle(617039, malware), clickHotMouse); Pressit et ante nisi vestigia meo tamen Est dignum relicta leves ulli exstant et videt domosque leonibus illum signisque creatis parentes quo corpore tenent, spectatorem. Cum inquit per. In caelum violentia ille altera silvis , ad falsa . Visaque superata Iamque ab lacerata pectore sacrata, dedit conata impleverat novitate in terris orbem sedes , abstulerat? Fovit cognovit, dixerat uritur, Iuno credi, erat latet? Cernis natas nec et, illi tamen indicium, non possit fletus Laomedonta! Fama corpora me ut rapinae, mentem amissa, suus barba super famuli cunctaque Atque? Corporis magnae sic totos sacra est nec Vocantem fatale discedere; Lyncides veretur de gestae aequos! Othrys neque, deficiunt laudemur spelunca longe cladis, quique: modo? Dixit omnipotens dique voluit quoque relabi, tum auras mollibus et. Sumus morientem omnem et post illa aliqua si, aequor. Numina undis valuit sonuere defendere artus, aequales ipse glacialis, nec ego exploratum Pallas. Coniugis remige nitidissimus fui perstat nuribusque quinos, factus. Sic sumus ante? Nostro nos cera raptor teneat. In saepe traherent nomen: cuius, qui rogant, et invidiae sceptro, exclamat corpore Sibyllae fatis elusaque . Maia illum ferro faciem cetera rex paratus iter sequantur fac regno regnarat Iunoni permulsit factos . Quod illo non faece numine in cursus; est usus. Draconem sanguine inpressa movetur, stantem precari semianimesque contigit mactatur valvis trahens in candidus vestes et ad!"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "DocFX Flavored Markdown | DocFX",
    "keywords": "DocFX Flavored Markdown DocFX supports DocFX Flavored Markdown , aka DFM. It supports all GitHub Flavored Markdown syntax and compatible with CommonMark. Also, DFM adds new syntax to support additional functionalities, including cross reference and file inclusion. 支持 callout 用法 > [!Note] 下面是个例子： Note The default markdown engine generated by docfx init has been switched to markdig engine, which is built on the top of markdig . Previous markdown engine dfm and dfm-latest will be kept for compatibiilty. Yaml Header Yaml header in DFM is considered as the metadata for the Markdown file. It will transform to yamlheader tag when processed. Yaml header MUST be the first thing in the file and MUST take the form of valid YAML set between triple-dashed lines. Here is a basic example: --- uid: A.md title: A --- Cross Reference Cross reference allows you to link to another topic by using its unique identifier (called UID) instead of using its file path. For conceptual Markdown files UID can be defined by adding a uid metadata in YAML header: --- uid: uid_of_the_file --- This is a conceptual topic with `uid` specified. For reference topics, UIDs are auto generated from source code and can be found in generated YAML files. You can use one of the following syntax to cross reference a topic with UID defined: Markdown link: [link_text](xref:uid_of_the_topic) Auto link: <xref:uid_of_the_topic> Shorthand form: @\"uid_of_the_topic\" All will render to: <a href=\"url_of_the_topic\">link_text</a> If link_text is not specified, DocFX will extract the title from the target topic and use it as the link text. Do not use the @uid link in brackets (like this: (@uid) ). DocFX cannot parse this link. The @uid link should be separated with white spaces. If you need to add a link in brackets, use [](xref:uid) . Note Hashtag in xref is always treated as separator between file name and anchor name. That means if you have # in UID, it has to be encoded to %23 . Actually xref format follows URI standard so all reserved characters should be encoded. For more information, see cross reference . File Inclusion DFM adds syntax to include other file parts into current file, the included file will also be considered as in DFM syntax. There are two types of file inclusion: Inline and block, as similar to inline code span and block code. Note YAML header is NOT supported when the file is an inclusion. Inline Inline file inclusion is in the following syntax, in which <title> stands for the title of the included file, and <filepath> stands for the file path of the included file. The file path can be either absolute or relative. <filepath> can be wrapped by ' or \" . Note For inline file inclusion, the file included will be considered as containing only inline tags, for example, ### header inside the file will not transfer since <h3> is a block tag, while [a](b) will transform to <a href='b'>a</a> since <a> is an inline tag. Also, ending white spaces will be trimmed , considering ending white spaces in inline inclusion in most cases are typos. ...Other inline contents... [!include[<title>](<filepath>)] Block Block file inclusion must be in a single line and with no prefix characters before the start [ . Content inside the included file will transform using DFM syntax. [!include[<title>](<filepath>)] Section definition User may need to define section. Mostly used for code table. Give an example below. > [!div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"] > ```cs > <cs code text> > ``` > ```javascript > <js code text> > ``` The above blockquote Markdown text will transform to section html as in the following: <div class=\"tabbedCodeSnippets\" data-resources=\"OutlookServices.Calendar\"> <pre><code>cs code text</code></pre> <pre><code>js code text</code></pre> </div> Code Snippet Allows you to insert code with code language specified. The content of specified code path will expand. [!code-<language>[<name>](<codepath><queryoption><queryoptionvalue> \"<title>\")] <language> can be made up of any number of character and '-'. However, the recommended value should follow Highlight.js language names and aliases . <codepath> is the path relative to the file containing this markdown content in file system, which indicates the code snippet file that you want to expand. <queryoption> and <queryoptionvalue> are used together to retrieve part of the code snippet file in the line range or tag name way. We have 2 query string options to represent these two ways: query string using # query string using ? 1. line range #L{startlinenumber}-L{endlinenumber} ?start={startlinenumber}&end={endlinenumber} 2. tagname #{tagname} ?name={tagname} 3. multiple region range Unsupported ?range={rangequerystring} 4. highlight lines Unsupported ?highlight={rangequerystring} 5. dedent Unsupported ?dedent={dedentlength} In ? query string, the whole file will be included if none of the first three option is specified. If dedent isn't specified, the maximum common indent will be trimmed automatically. <title> can be omitted as it doesn't affect the DocFX markup result, but it can beautify the result of other Markdown engine, like GitHub Preview. Code Snippet Sample [!code-csharp[Main](Program.cs)] [!code[Main](Program.cs#L12-L16 \"This is source file\")] [!code-vb[Main](../Application/Program.vb#testsnippet \"This is source file\")] [!code[Main](index.xml?start=5&end=9)] [!code-javascript[Main](../jquery.js?name=testsnippet)] [!code[Main](index.xml?range=2,5-7,9-) \"This includes the lines 2, 5, 6, 7 and lines 9 to the last line\"] [!code[Main](index.xml?highlight=2,5-7,9-) \"This includes the whole file with lines 2,5-7,9- highlighted\"] Tag Name Representation in Code Snippet Source File DFM currently supports the following <language> values to be able to retrieve by tag name: C family Start with: // <{name}> End with: // </{name}> Languages: actionscript, arduino, assembly (alias: nasm), c (alias: cpp, c++, objective-c, obj-c, objc, objectivec), csharp (alias: cs), cshtml, cuda, d (alias: dlang), fsharp (alias: fs), go (alias: golang), java, javascript (alias: js, node), pascal, php, processing, rust, scala, smalltalk, swift, typescript (alias: ts) File extensions: .as, .asm, .ino, .c, .cc, .cpp, .cs, .cshtml .cu, .cuh, .d, .fs, .fsi, .fsx, .go, .h, .hpp, .java, .js, .pas, .php, .pde, .rs, .scala, .st, .swift, .ts Basic family Start with: ' <{name}> End with: ' </{name}> Languages: vb, vbhtml, vbnet, vbscript File extensions: .bas, .vb, .vba, .vbhtml, .vbs Markup language family Start with: <!-- <{name}> --> End with: <!-- </{name}> --> Languages: cshtml, html, vbhtml, wsdl, xml, xsl, xslt, xsd, xaml File extensions: .asp, .aspx, .csdl, .cshtml, .edmx, .jsp, .vbhtml, .wsdl, .xaml, .xml, .xsd, .xsl, .xslt, .html Sql family Start with: -- <{name}> End with: -- </{name}> Languages: sql File extensions: .sql Script family Start with: # <{name}> End with: # </{name}> Languages: perl, powershell (alias: posh), python, r, ruby (alias: ru), shell (alias: sh, bash) File extensions: .bash, .pl, .ps1, .py, .r, .ru, .ruby, .sh Special language batchfile Start with: rem <{name}> End with: rem </{name}> Languages: batchfile File extensions: .bat .cmd csharp Start with: #region {name} End with: #endregion Languages: csharp (alias: cs) File extensions: .cs .cshtml erlang Start with: % <{name}> End with: % </{name}> Languages: erlang File extensions: .erl haskell Start with: -- <{name}> End with: -- </{name}> Languages: haskell File extensions: .hs matlab Start with: % <{name}> End with: % </{name}> Languages: matlab File extensions: .matlab lisp Start with: ; <{name}> End with: ; </{name}> Languages: lisp File extensions: .lisp, .lsp lua Start with: -- <{name}> End with: -- </{name}> Languages: lua File extensions: .lua vb Start with: #Region {name} End with: #End Region Languages: vb (alias: vbnet) File extensions: .vb .vbhtml Note If dev-lang is not specified, file extension will be used to determine the language. Code Snippet for Jupyter Notebooks Allows you to insert code from a code cell of a Jupyter Notebook. The source content in the specified code cell will expand. Steps to use this: In your Jupyter Notebook, add metadata to the code cell you will reference: \"metadata\": { \"name\": \"{tagname}\" } In your .md file, use name to identify the cell. [!notebook-<language>[](<codepath>?name={tagname})]] Code Snippet for Jupyter Notebooks Sample For this Jupyter Notebook cell: { \"cells\": [ { \"cell_type\": \"code\", \"execution_count\": null, \"metadata\": { \"name\": \"import\" }, \"outputs\": [], \"source\": [ \"import azureml.core\\n\", \"print(azureml.core.VERSION)\" ] }, Use the markup: [!notebook-python[](<codepath>?name={import})]] to display the lines of code in the source part of the cell: import azureml.core print(azureml.core.VERSION) Note (Warning/Tip/Important) Using specific syntax inside block quote to indicate the following content is Note. > [!NOTE] > <note content> > [!WARNING] > <warning content> The above content will be transformed to the following html: <div class=\"NOTE\"> <h5>NOTE</h5> <p>note content</p> </div> <div class=\"WARNING\"> <h5>WARNING</h5> <p>WARNING content</p> </div> Here are all the supported note types with the styling of the default theme applied: Note This is a note which needs your attention, but it's not super important. Tip This is a note which needs your attention, but it's not super important. Warning This is a warning containing some important message. Important This is a warning containing some important message. Caution This is a warning containing some important message. Tabbed content Syntax Start a tab by a special markdown title (any level). Title content should be a markdown link. Link target is #tab/{tabid} or #tab/{tabid}/{condition} Continue by any other content. End by a markdown hr. Example Tab group 1: # [Tab Text 1](#tab/tabid-1) Tab content-1-1. # [Tab Text 2](#tab/tabid-2) Tab content-2-1. *** Tab group 2: # [Tab Text A](#tab/tabid-a) Tab content-a-1. # [Tab Text B](#tab/tabid-b) Tab content-b-1. *** Tab group 3: # [Tab Text 1](#tab/tabid-1) Tab content-1-1. # [Tab Text 2](#tab/tabid-2) Tab content-2-1. *** Tab group 4: # [Tab Text A](#tab/tabid-a) Tab content-a-2. # [Tab Text B](#tab/tabid-b) Tab content-b-2. *** The result will be: Tab group 1: Tab Text 1 Tab Text 2 Tab content-1-1. Tab content-2-1. Tab group 2: Tab Text A Tab Text B Tab content-a-1. Tab content-b-1. Tab group 3: Tab Text 1 Tab Text 2 Tab content-1-1. Tab content-2-1. Tab group 4: Tab Text A Tab Text B Tab content-a-2. Tab content-b-2. Behavior Tab groups with a same set of id are linkable in one page. In example, tab group 1, 3 have same id set: tabid-1 , tabid-2 , tab group 2, 4 have same id set: tabid-a , tabid-b . So tab group 1, 3 are linked, tab group 2, 4 are linked. When tab tabid-1 in tab group 1 is clicked, tab tabid-1 in tab group 3 will be selected in same time. But tab group 2, 4 do not have any changed. Condition Condition is the tab id of other table groups. e.g.: Tab Group 1: # [**Tab Text 1**](#tab/tabid-1) Tab content-1. # [**Tab Text 2**](#tab/tabid-2) Tab content-2. *** Tab Group 2: # [Tab Text A](#tab/tabid-a/tabid-1) Tab content-a for 1. # [Tab Text A](#tab/tabid-a/tabid-2) Tab content-a for 2. # [Tab Text B](#tab/tabid-b/tabid-1) Tab content-b for 1. # [Tab Text B](#tab/tabid-b/tabid-2) Tab content-b for 2. *** Result: Tab Group 1: Tab Text 1 Tab Text 2 Tab content-1. Tab content-2. Tab Group 2: Tab Text A Tab Text A Tab Text B Tab Text B Tab content-a for 1. Tab content-a for 2. Tab content-b for 1. Tab content-b for 2. When select tabid-1 in tab group 1, you can get content-a or content-b for 1 in group 2.\\ When select tabid-2 in tab group 1, you can get content-a or content-b for 2 in group 2. Video Allows you to add videos to your topics. Syntax: > [!Video embed_link] Note You must provide the embed uri of the video you wish to add to your topic. Example: > [!Video https://www.youtube.com/embed/TAaG0nUUy6A] Result: Differences introduced by DFM syntax Warning DFM introduces more syntax to support more functionalities. When GFM does not support them, preview the Markdown file inside GFM Preview can lead to different results. YAML header In GFM, YAML header must start at the very beginning of the Markdown file. In DFM, YAML header contains more powerful meanings. Refer to Yaml Header for details. ...some text... --- a: b --- In GFM, it would be rendered as <hr>a: b<hr> . In DFM, it would be rendered as a YAML header. If you want to get <hr> in html in DFM, use: - - - *** * * * or change content to make it not in YAML format: --- a\\: b --- Text after block extension Some block extension in DFM cannot be recognized in GFM. In GFM, it would be treated as a part of paragraph. Then, following content would be treated as a part of paragraph. For example: > [!NOTE] > This is code. In GFM, it will be rendered as a paragraph with content [!NOTE] This is code. in blockquote. In DFM, it will be rendered as a code in note."
  },
  "getting-started/customize-look-and-feel.html": {
    "href": "getting-started/customize-look-and-feel.html",
    "title": "Customize the Look and Feel | DocFX",
    "keywords": "Customize the Look and Feel If you don't configure it, DocFx will generate a website with an out-of-the-box template. The website for this Quick Start is then generated to this: For this website we created a custom template with a few extra's. That results in this look-and-feel: In DocFx\\templates you can find custom templates for generating the documentation website and PDF. The basic template is first referenced in docfx.json to apply the defaults. As second template our custom template is configured. This will add or overwrite files of the default. Material design We chose the DocFx Material Theme as a starting point of our custom template. The Material.zip was downloaded and extracted. It contains a modified styles\\main.css and a modified partials\\head.tmpl.partial . Warning In the unique case the default template of a newer DocFx version would be changed, this custom overwrite template might cause problems or parts being ignored. If you see strange behavior, Check the custom parts with the parts from the default template. More information can be found in How-to: Create A Custom Template . Mermaid support To enable the rendering of Mermaid diagrams in the documentation website, the code below is added to partials\\scripts.tmpl.partial . <!-- mermaid support --> <script type=\"text/javascript\" src=\"https://unpkg.com/mermaid@8.5.2/dist/mermaid.min.js\" integrity=\"sha384-dV0RNdYNgPqjamYrB83Q21NNeuYk1jpKyUBkKQrT+c7krNFk4k39ktYZV4mOdMV1\" crossorigin=\"anonymous\"></script> <script> mermaid.initialize({ startOnLoad: false }); mermaid.init(undefined, \".lang-mermaid\"); </script> By adding this, mermaid diagrams are rendered in the website. A sample Mermaid diagram could be something like: <!-- markdownlint-disable MD040 --> gantt title Example Gantt diagram with Mermaid dateFormat YYYY-MM-DD section Team 1 Research & requirements :done, a1, 2021-03-08, 2021-04-10 Review & documentation : after a1, 20d section Team 2 Implementation :crit, active, 2021-03-25 , 20d Testing :crit, 20d <!-- markdownlint-enable MD040 --> which will be rendered as: gantt title Example Gantt diagram with Mermaid dateFormat YYYY-MM-DD section Team 1 Research & requirements :done, a1, 2021-03-08, 2021-04-10 Review & documentation : after a1, 20d section Team 2 Implementation :crit, active, 2021-03-25 , 20d Testing :crit, 20d Warning Currently this doesn't work for the generation of a PDF! 'Copy code'-button It can be desireable to have a copy button on code blocks to copy the contents to the clipboard for easy re-use. We have added this solution to the template for the website. In the Styles folder two files were added: copyCodeButton.css and copyCodeButton.js . In partials\\scripts.tmpl.partial the JavaScript file is referenced: ... <script type=\"text/javascript\" src=\"{{_rel}}styles/docfx.js\"></script> <script type=\"text/javascript\" src=\"{{_rel}}styles/copyCodeButton.js\"></script> <script type=\"text/javascript\" src=\"{{_rel}}styles/main.js\"></script> ... And in partials\\head.tmpl.partial the CSS file is referenced: ... <link rel=\"stylesheet\" href=\"{{_rel}}styles/docfx.css\"> <link rel=\"stylesheet\" href=\"{{_rel}}styles/copyCodeButton.css\"> <link rel=\"stylesheet\" href=\"{{_rel}}styles/main.css\"> ... When this is added, code blocks will have a Copy-button like this: When a user clicks the Copy-button, the contents is copied into the clipboard and the icon changes for some time to indicate the copy was succesfull: The Logo The logo of the website is logo.svg in the root of the template folder. This can be overwritten with your own logo. If you want to use your own logo, you need a SVG format of your logo. If you have another format, use a website like Convertio to upload a PNG and have it converted to an SVG that can be downloaded. If you have an SVG but it's not the right size, you can use a website like I♥️IMG to resize it. You can upload your SVG and set the size to 48x48 pixels and click Resize IMAGES . The image is then downloaded. Put your logo.svg in the root of the template folder. Header Bar Color If you want to change the color of the header bar, open styles\\main.css and modify the --header-bg-color value. If you want to make sure it's a web safe color, you can use a website like Color Tools.NET to make your selected color web safe. PDF Header Styling If you want to change the color of the Table of Contents box, open the toc.html.tmpl in the root of the PDF template."
  },
  "getting-started/deploy-docfx-azure-website.html": {
    "href": "getting-started/deploy-docfx-azure-website.html",
    "title": "Deploy the DocFx Documentation website to an Azure Website automatically | DocFX",
    "keywords": "Deploy the DocFx Documentation website to an Azure Website automatically In the README the process is described to generate content of a documentation website using DocFx. This document describes how to setup an Azure Website to host the content and automate the deployment to it using a pipeline in Azure DevOps. The QuickStart folder that is provided for a quick setup of DocFx generation also contains the files explained in this document. Especially the .pipelines and infrastructure folders. The following steps can be followed when using the QuickStart folder. In the infrastructure folder you can find the Terraform files to create the website in an Azure environment. Out of the box, the script will create a website where the documentation content can be deployed to. 1. Install Terraform You can use tools like Chocolatey to install Terraform: choco install terraform 2. Set the proper variables Important Make sure you modify the value of the app_name , rg_name and rg_location variables. The app_name value is appended by azurewebsites.net and must be unique. Otherwise the script will fail that it cannot create the website. In the QuickStart folder setup, authentication is disabled. If you want that enabled, make sure you have create an Application in the Azure AD and have the client ID . This client id must be set as the value of the client_id variable in variables.tf . In the main.tf make sure you uncomment the authentication settings in the app-service . For more information see Configure Azure AD authentication - Azure App Service . If you want to set a custom domain for your documentation website with an SSL certificate you have to do some extra steps. You have to create a Key Vault and store the certificate there. Next step is to uncomment and set the values in variables.tf . You also have to uncomment the necessary steps in main.tf . All is indicated by comment-boxes. For more information see Add a TLS/SSL certificate in Azure App Service . Some extra information on SSL certificate, custom domain and Azure App Service can be found in the following paragraphs. If you are familiar with that or don't need it, go ahead and continue with Step 3 . SSL Certificate To secure a website with a custom domain name and a certificate, you can find the steps to take in the article Add a TLS/SSL certificate in Azure App Service . That article also contains a description of ways to obtain a certificate and the requirements for a certificate. Usually you'll get a certificate from the customers IT department. If you want to start with a development certificate to test the process, you can create one yourself. You can do that in PowerShell with the script below. Replace: [YOUR DOMAIN] with the domain you would like to register, e.g. docs.somewhere.com [PASSWORD] with a password of the certificate. It's required for uploading a certificate in the Key Vault to have a password. You'll need this password in that step. [FILENAME] for the output file name of the certificate. You can even insert the path here where it should be store on your machine. You can store this script in a PowerShell script file (ps1 extension). $cert = New-SelfSignedCertificate -CertStoreLocation cert:\\currentuser\\my -Subject \"cn=[YOUR DOMAIN]\" -DnsName \"[YOUR DOMAIN]\" $pwd = ConvertTo-SecureString -String '[PASSWORD]' -Force -AsPlainText $path = 'cert:\\currentuser\\my\\' + $cert.thumbprint Export-PfxCertificate -cert $path -FilePath [FILENAME].pfx -Password $pwd The certificate needs to be stored in the common Key Vault. Go to Settings > Certificates in the left menu of the Key Vault and click Generate/Import . Provide these details: Method of Certificate Creation: Import Certificate name: e.g. ssl-certificate Upload Certificate File: select the file on disc for this. Password: this is the [PASSWORD] we reference earlier. Custom domain registration To use a custom domain a few things need to be done. The process in the Azure portal is described in the article Tutorial: Map an existing custom DNS name to Azure App Service . An important part is described under the header Get a domain verification ID . This ID needs to be registered with the DNS description as a TXT record. Important to know is that this Custom Domain Verification ID is the same for all web resources in the same Azure subscription. See this StackOverflow issue . This means that this ID needs to be registered only once for one Azure Subscription. And this enables (re)creation of an App Service with the custom domain though script. Add Get-permissions for Microsoft Azure App Service The Azure App Service needs to access the Key Vault to get the certificate. This is needed for the first run, but also when the certificate is renewed in the Key Vault. For this purpose the Azure App Service accesses the Key Vault with the App Service resource provided identity. This identity can be found with the service principal name abfa0a7c-a6b6-4736-8310-5855508787cd or Microsoft Azure App Service and is of type Application . This ID is the same for all Azure subscriptions. It needs to have Get-permissions on secrets and certificates. For more information see this article Import a certificate from Key Vault . Add the custom domain and SSL certificate to the App Service Once we have the SSL certificate and there is a complete DNS registration as described, we can uncomment the code in the Terraform script from the QuickStart folder to attach this to the App Service. In this script you need to reference the certificate in the common Key Vault and use it in the custom hostname binding. The custom hostname is assigned in the script as well. The settings ssl_state needs to be SniEnabled if you're using an SSL certificate. Now the creation of the authenticated website with a custom domain is automated. 3. Deploy Azure resources from your local machine Open up a command prompt. For the commands to be executed, you need to have a connection to your Azure subscription. This can be done using Azure Cli . Type this command: az login This will use the web browser to login to your account. You can check the connected subscription with this command: az account show If you have to change to another subscription, use this command where you replace [id] with the id of the subscription to select: az account set --subscription [id] Once this is done run this command to initialize: terraform init Now you can run the command to plan what the script will do. You run this command every time changes are made to the terraform scripts: terraform plan Inspect the result shown. If that is what you expect, apply these changes with this command: terraform apply When asked for approval, type \"yes\" and ENTER. You can also add the -auto-approve flag to the apply command. The deployment using Terraform is not included in the pipeline from the QuickStart folder as described in the next step, as that asks for more configuration. But of course that can always be added. 4. Deploy the website from a pipeline The best way to create the resources and deploy to it, is to do this automatically in a pipeline. For this purpose the .pipelines/documentation.yml pipeline is provided. This pipeline is built for an Azure DevOps environment. Create a pipeline and reference this YAML file. Important the QuickStart folder contains a web.config that is needed for deployment to IIS or Azure App Service. This enables the use of the json file for search requests. If you don't have this in place, the search of text will never return anything and result in 404's under the hood. You have to create a Service Connection in your DevOps environment to connect to the Azure Subscription you want to deploy to. Important set the variables AzureConnectionName to the name of the Service Connection and the AzureAppServiceName to the name you determined in the infrastructure/variables.tf . In the QuickStart folder the pipeline uses master as trigger, which means that any push being done to master triggers the pipeline. You will probably change this to another branch."
  },
  "getting-started/README.html": {
    "href": "getting-started/README.html",
    "title": "Using DocFx and Companion Tools to generate a Documentation website | DocFX",
    "keywords": "Using DocFx and Companion Tools to generate a Documentation website If you want an easy way to have a website with all your documentation coming from Markdown files and comments coming from code, you can use DocFx . The website generated by DocFx also includes fast search capabilities. There are some gaps in the DocFx solution, but we've provided companion tools that help you fill those gaps. customize-look-and-feel Quick Start To get you started quickly from scratch, a QuickStart folder is provided which can be copied with some common folder, files and settings mentioned in the steps below. Copy the content from the QuickStart folder folder to your own repository to get started in minutes. Tip TLDR; If you want a really quick start using Azure DevOps and Azure App Service without reading the what and how, follow these steps: Azure DevOps: If you don't have it yet, create a project in Azure DevOps and create a Service Connection to your Azure environment . Clone the repository. QuickStart folder: Copy the contents of the QuickStart folder to the root of your repository, except for the docs folder if you already have one, the .gitignore and the README.md. Azure: Create a resource group in your Azure environment where the documentation website resources should be created. Create Azure resources: Fill in the default values in infrastructure/variables.tf and run the commands from Step 3 - Deploy Azure resources from your local machine to create the Azure Resources. Pipeline: Fill in the variables in DocFx/.pipelines/documentation.yml , commit the changes and push the contents of the repository to your branch (possibly through a PR). Now you can create a pipeline in your Azure DevOps project that uses the DocFx/.pipelines/documentation.yml and run it. Documents and projects folder structure If that's not the case in your situation but you still want to combine multiple repositories into one documentation website, you'll have to clone all repositories first to be able to combine the information. In this recipe we'll assume a monorepo is used. In the steps below we'll consider the generation of the documentation website from this content structure: ├── DocFx // all documents │ ├── .pipelines // Azure DevOps pipeline for automatic generation and deployment │ ├── infrastructure // Terraform scripts for creation of the Azure website │ ├── templates // Templates for website and PDF generation │ ├── GenerateDoc.cmd // Command file for local execution for generating website and PDF │ ├── web.config // web.config to enable search in deployed website (IIS) │ ├── docs // all documents │ ├── .attachments // all images and other attachments used by documents │ ├── src // all projects │ ├── build // build settings │ ├── dotnet // .NET build settings │ ├── Directory.Build.props // project settings for all .NET projects in sub folders │ ├── [Project folders] │ ├── x-cross │ ├── toc.yml // Cross reference definition (optional) │ ├── .markdownlint.json // Markdownlinter settings ├── docfx.json // DocFx configuration ├── index.md // Website landing page ├── README.md // Description of folders and files here (repo only, not in docs) ├── toc.yml // Definition of the website header content links We'll be using the DocLinkChecker tool to validate all links in documentation and for orphaned attachments. That's the reason we have all attachments in the .attachments folder. In the generated website from the QuickStart folder you'll see that the hierarchies of documentation and references is combined in the left table of contents. This is achieved by the definition and use of x-cross\\toc.yml . If you don't want the hierarchies combined, just remove the folder and file from your environment and (re)generate the website. A .markdownlint.json is included with the contents below. The MD013 setting is set to false to prevent checking for maximum line length. You can modify this file to your likings to include or exclude certain tests. { \"MD013\": false } The contents of the DocFx/.pipelines and DocFx/infrastructure folders are explained in the recipe Deploy the DocFx Documentation website to an Azure Website automatically . Reference documentation from source code DocFx can generate reference documentation from code, where C# and Typescript are supported best at the moment. In the QuickStart folder we only used C# projects. For DocFx to generate quality reference documentation, quality triple slash-comments are required. See Triple-slash (///) Code Comments Support . To enforce this, it's a good idea to enforce the use of StyleCop . There are a few steps that will give you an easy start with this. First, you can use the Directory.Build.props file in the /src folder in combination with the files in the build/dotnet folder. By having this, you enforce StyleCop in all Visual Studio project files in it's sub folders with a configuration of which rules should be used or ignored. You can tailor this to your needs of course. For more information, see Customize your build and Use rule sets to group code analysis rules . To make sure developers are forced to add the triple-slash comments by throwing compiler errors and to have the proper settings for the generation of documentation XML-files, add the TreatWarningsAsErrors and GenerateDocumentationFile settings to every .csproj file. You can add that in the first PropertyGroup settings like this: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> ... <GenerateDocumentationFile>true</GenerateDocumentationFile> <TreatWarningsAsErrors>true</TreatWarningsAsErrors> </PropertyGroup> ... </Project> Now you are all set to generate documentation from your C# code. For more information about languages supported by DocFx and how to configure it, see Introduction to Multiple Languages Support . Note You can also add a PropertyGroup definition with the two settings in Directory.Build.props to have that settings in all projects. But in that case it will also be inherited in your Test projects. 1. Install DocFx and markdownlint-cli Go to the DocFx website to the Download section and download the latest version of DocFx. Go to the github page of markdownlint-cli to find download and install options. You can also use tools like Chocolatey to install: choco install docfx choco install markdownlint-cli 2. Configure DocFx Configuration for DocFx is done in a docfx.json file. Store this file in the root of your repository. Note You can store the docfx.json somewhere else in the hierarchy, but then you need to provide the path of the file as an argument to the docfx command so it can be located. Below is a good configuration to start with, where documentation is in the /docs folder and the sources are in the /src folder: { \"metadata\": [ { \"src\": [ { \"files\": [\"src/**.csproj\"], \"exclude\": [ \"output/_site/**\", \"output/_pdf/**\", \"DocFx/**\", \"**/bin/**\", \"**/obj/**\", \"**/[Tt]ests/**\" ] } ], \"dest\": \"output/reference\", \"disableGitFeatures\": false } ], \"build\": { \"content\": [ { \"files\": [\"output/reference/**\"] }, { \"files\": [\"**.md\", \"**/toc.yml\"], \"exclude\": [ \"README.md\", \"output/_site/**\", \"output/_pdf/**\", \"DocFx/**\", \"**/bin/**\", \"**/obj/**\", \"**/[Tt]ests/**\" ] } ], \"resource\": [ { \"files\": [\"docs/.attachments/**\"] }, { \"src\": \"DocFx\", \"files\": [\"web.config\"] } ], \"template\": [\"DocFx/templates/cse\"], \"globalMetadata\": { \"_appTitle\": \"CSE Documentation\", \"_enableSearch\": true }, \"markdownEngineName\": \"markdig\", \"dest\": \"output/_site\", \"xrefService\": [\"https://xref.docs.microsoft.com/query?uid={uid}\"] }, \"pdf\": { \"name\": \"CSE-Documentation\", \"coverTitle\": \"CSE Documentation\", \"content\": [ { \"files\": [\"output/reference/**\"] }, { \"files\": [\"**.md\", \"x-cross/toc.yml\"], \"exclude\": [ \"output/_site/**\", \"output/_pdf/**\", \"DocFx/**\", \"**/bin/**\", \"**/obj/**\", \"**/[Tt]ests/**\" ] } ], \"resource\": [ { \"files\": [\"docs/.attachments/**\"] } ], \"template\": [\"DocFx/templates/pdf.cse\"], \"globalMetadata\": { \"_appTitle\": \"CSE Documentation\" }, \"wkhtmltopdf\": { \"additionalArguments\": \"--enable-local-file-access\" }, \"markdownEngineName\": \"markdig\", \"dest\": \"output/_pdf\" } } 3. Setup some basic documents We suggest starting with a basic documentation structure in the /docs folder. In the provided QuickStart folder we have a basic setup: ├── docs │ ├── .attachments // All images and other attachments used by documents │ │ ├── architecture-decisions │ └── .order │ └── decision-log.md // Sample index into all ADRs │ └── README.md // Landing page architecture decisions │ │ ├── getting-started │ └── .order │ └── README.md // This recipe document. Replace the content with something meaningful to the project │ │ ├── guidelines │ └── .order │ └── docs-guidelines.md // General documentation guidelines │ └── README.md // Landing page guidelines │ │ ├── templates // all templates like ADR template and such │ └── .order │ └── README.md // Landing page templates │ │ ├── working-agreements │ └── .order │ └── README.md // Landing page working agreements │ │ ├── .order // Providing a fixed order of files and directories │ ├── index.md // Landing page documentation You can use templates like working agreements and such from the CSE Playbook . To have a proper landing page of your documentation website, you can use a markdown file called INDEX.MD in the root of your repository. Contents can be something like this: # My Documentation This is the landing page of the My Documentation website. This is the page to introduce everything on the website. You can add specific links that are important to provide direct access. > Try not to duplicate the links on the top of the page, unless it really makes sense. To get started with the setup of this website, read the getting started document. 4. Compile the companion tools and run them Note To explain each step, we'll be going through the various steps in the next few paragraphs. In the provided sample, a batch-file called GenerateDocWebsite.cmd is included. This script will take all the necessary steps to compile the tools, execute the checks, generate the table of contents and execute docfx to generate the website. To check for proper markdown formatting the markdownlint-cli tool is used. The command takes it's configuration from the .markdownlint.json file in the root of the project. To check all markdown files, simply execute this command: markdownlint **/*.md In the QuickStart folder we've also included the two companion tools TocDocFxCreation and DocLinkChecker . Note The QuickStart folder contains a static version of the companion tools. To use the latest version, download it from the DocFx Companion Tools repository . You can compile the tools from Visual Studio, but you can also run dotnet build in both tool folders. The DocLinkChecker companion tool is used to validate what's in the docs folder. It validates links between documents and attachments in the docs folder and checks if there aren't orphaned attachments. An example of executing this tool, where the check of attachments is included: DocLinkChecker.exe -d ./docs -a The TocDocFxCreation tool is needed to generate a table of contents for your documentation, so users can navigate between folders and documents. If you have compiled the tool, use this command to generate a table of content file toc.yml . To generate a table of contents with the use of the .order files for determining the sequence of articles and to automatically generate index.md documents if no default document is available in a folder, this command can be used: TocDocFxCreation.exe -d ./docs -sri 5. Run DocFx to generate the website Run the docfx command to generate the website, by default in the _site folder. Tip If you want to check the website in your local environment, provide the --serve option to either the docfx command or the GenerateDocWebsite script. A small webserver is launched that hosts your website, which is accessible on localhost. Style of the website If you started with the QuickStart folder, the website is generated using a custom theme using material design and the Microsoft logo. You can change this to your likings. For more information see How-to: Create A Custom Template | DocFX website (dotnet.github.io) . Deploy to an Azure Website After you completed the steps, you should have a default website generated in the _site folder. But of course, you want this to be accessible for everyone. So, the next step is to create for instance an Azure Website and have a process to automatically generate and deploy the contents to that website. That process is described in the recipe Deploy the DocFx Documentation website to an Azure Website automatically . References DocFX - static documentation generator Deploy the DocFx Documentation website to an Azure Website automatically"
  },
  "index.html": {
    "href": "index.html",
    "title": "DocFX | DocFX",
    "keywords": "DocFX A DocFX template inspired by Microsoft's Documentation theme. This is an override of the default template so you need to enable both in the docfx.json . Demo You can view a demo DocFX project with this template HERE . Install Download the source or the zipped file from the releases . Create a templates folder in the root of your DocFX directory. Copy the DocFX folder to the templates folder. Update the docfx.json configuration to include the template: { \"build\": { \"template\": [ \"default\", \"templates/material\" ] } } Acknowledgement Many thanks to Steffen Wilke and Mickael Bonfill from whom I borrowed several source assets from their DocFX templates."
  }
}